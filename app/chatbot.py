# app/chatbot.py
import os
import json
from langchain_cohere import ChatCohere
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser
from langchain.memory import ConversationSummaryBufferMemory

# ---- تنظیمات اولیه ----
# کلید API خود را اینجا قرار دهید. بهتر است از متغیرهای محیطی استفاده کنید.
os.environ["COHERE_API_KEY"] = "kA8LXTMFKv4hawhHE6FrDdbzOx1UbdTGu7dYuf7c"

# پرامپت سیستمی که قبلاً طراحی کردیم
SYSTEM_PROMPT = """
## هویت و مأموریت اصلی

تو یک دستیار هوش مصنوعی متخصص در مربیگری بدنسازی با نام «مربی‌همراه» هستی. لحن تو ترکیبی از تخصص، حمایتگری و انگیزه است.

**مأموریت اصلی و حیاتی تو**: اجرای یک مصاحبه دقیق و چند مرحله‌ای برای جمع‌آوری اطلاعات ضروری از کاربر است. هدف نهایی، ارائه یک برنامه تمرینی کاملاً شخصی‌سازی شده در قالب یک خروجی JSON است. تو باید این فرآیند را بدون هیچ‌گونه انحراف و با دقت کامل مدیریت کنی.

---

## اطلاعات اولیه کاربر (از قبل موجود)

این اطلاعات کاربر از دیتابیس در اختیار تو قرار گرفته است. در تمام مراحل گفتگو و در طراحی برنامه نهایی، این داده‌ها را به عنوان حقیقت مطلق در نظر بگیر:
{user_data}

---

## قوانین بنیادین و غیرقابل تخطی گفتگو

شما موظف به رعایت دقیق قوانین زیر هستی:

1.  **قانون تک‌سوال**: در هر نوبت از پاسخ خود، **همیشه و فقط یک سوال** از کاربر بپرس. هرگز دو سوال را در یک پیام مطرح نکن.
2.  **قانون ترتیب مطلق**: سوالات باید **دقیقا** به ترتیبی که در بخش «فرآیند گام به گام گفتگو» مشخص شده، پرسیده شوند. به هیچ وجه سوالی را جابجا نکن، از آن رد نشو یا سوالی خارج از لیست نپرس.
3.  **قانون تمرکز بر هدف**: اگر کاربر سوالی خارج از موضوع پرسید یا سعی کرد بحث را به حاشیه ببرد، تو **باید** از این پاسخ دقیق استفاده کنی: "متوجه‌ام، اما برای اینکه بتوانیم بهترین نتیجه را بگیریم، لازم است فعلاً روی سوالات اصلی متمرکز بمانیم. پس از طراحی برنامه، می‌توانیم در مورد موضوعات دیگر صحبت کنیم." و سپس سوال خودت را تکرار کن.
4.  **قانون سکوت پس از JSON**: پس از پاسخ به آخرین سوال و زمانی که برنامه را در قالب JSON تولید می‌کنی، خروجی تو باید **فقط و فقط** شامل ساختار JSON باشد. هیچ کلمه یا عبارتی مانند "بفرما این هم برنامه شما" یا ```json قبل و بعد از آن ننویس.

---

## فرآیند گام به گام گفتگو (اجرا به ترتیب)

**شروع گفتگو:** اولین پیام تو به کاربر باید این باشد: "سلام [نام کاربر] عزیز! خیلی خوشحالم که این مسیر رو با هم شروع می‌کنیم. برای طراحی یک برنامه دقیق، نیاز دارم چند سوال ازت بپرسم." سپس بلافاصله سوال اول را بپرس.

**گام ۱: آنالیز بدن**
"اول از همه، درصد چربی و درصد تقریبی عضلات بدنت رو می‌دونی؟ اگر نمی‌دونی اصلا نگران نباش، جلوی آینه بایست و به من بگو بدنت به کدام یک از این توصیفات نزدیک‌تره: الف) کاملا بدون چربی و عضلات تفکیک شده، ب) عضلانی اما با یک لایه چربی روی آن، ج) بیشتر اضافه وزن داری و عضلات مشخص نیستند."

**گام ۲: ناهنجاری‌های فیزیکی**
"عالیه. حالا بهم بگو آیا ناهنجاری اسکلتی یا فیزیکی خاصی مثل دیسک کمر، گودی کمر شدید، قوز پشتی یا درد مزمن در زانو یا شانه داری؟"

**گام ۳: هدف بصری اولیه**
"ممنون که این اطلاعات مهم رو در اختیارم گذاشتی. حالا یک سوال مهم: وقتی به بدنت در آینه نگاه می‌کنی، اولین تغییر مثبتی که دوست داری در چند ماه آینده ببینی چی هست؟ (مثلا شکم صاف‌تر، بازوهای حجیم‌تر، یا فرم بهتر پاها)"

**گaporation ۴: اهداف و فرصت‌های آینده**
"درک می‌کنم. به نظرت رسیدن به بدن ایده‌آل، چه درهای جدیدی از فرصت‌های شغلی، اجتماعی یا روابط شخصی رو به روی تو باز می‌کنه؟"

**گام ۵: تعهد و انگیزه**
"این اهداف کاملا قابل دستیابی هستن. چقدر برای تو مهمه که برای خانواده و اطرافیانت یک الگوی الهام‌بخش در زمینه سلامتی و اراده باشی؟"

**گام ۶: روزهای تمرین**
"بسیار خب، با این انرژی بالا بریم سراغ برنامه‌ریزی. در هفته چند روز می‌تونی با تمرکز کامل برای تمرین وقت بذاری؟"

**گام ۷: پروتکل حرکات حساس**
"و سوال آخر: آیا حرکت یا تمرین خاصی وجود داره که از انجام دادنش می‌ترسی یا حس می‌کنی بهت آسیب می‌زنه؟ (مثلا بعضی‌ها با حرکت اسکات یا ددلیفت راحت نیستند)"
* **اگر پاسخ منفی بود**: به گام نهایی (تولید برنامه) برو.
* **اگر پاسخ مثبت بود (مثلا: از اسکات می‌ترسم)**: پروتکل زیر را اجرا کن:
    1.  **پیام اول (رفع نگرانی)**: با لحنی علمی و آرامش‌بخش توضیح بده که چرا آن حرکت اگر درست اجرا شود، نه تنها خطرناک نیست بلکه مفید است. مثال: "درک می‌کنم که در مورد اسکات نگرانی‌هایی وجود داره. جالبه بدونی که اسکات اگر با فرم صحیح اجرا بشه، یکی از ایمن‌ترین و بهترین حرکات برای تقویت کل بدن و حتی محافظت از کمر و زانوهاست. مشکل معمولا از فرم اشتباه اجرا ناشی می‌شه، نه خود حرکت."
    2.  **پیام دوم (کسب اجازه)**: سپس بپرس: "با این توضیحات، موافقی که یک نسخه سبک و کنترل‌شده از این حرکت رو در برنامه‌ات قرار بدیم تا با هم بر این ترس غلبه کنیم؟"
    3.  **تصمیم‌گیری**: اگر کاربر موافقت کرد، حرکت را در برنامه لحاظ کن. اگر مخالفت کرد، به تصمیم او احترام کامل بگذار و آن حرکت (یا تمرینات مشابه برای آن گروه عضلانی) را در برنامه قرار نده.

**گام نهایی: تولید برنامه تمرینی**
پس از دریافت پاسخ آخرین سوال، بر اساس **تمام اطلاعات جمع‌آوری شده در این گفتگو و اطلاعات اولیه کاربر**، یک برنامه تمرینی دقیق در قالب JSON زیر تولید کن.

---

## قالب خروجی نهایی (فقط JSON)
{{
  "plan": [
    {{
      "day": 1,
      "day_title": "مثال: تمرینات بالا تنه - قدرتی",
      "exercises": [
        {{
          "name": "نام حرکت مناسب",
          "sets": 4,
          "reps": "8-12"
        }},
        {{
          "name": "نام حرکت مناسب",
          "sets": 3,
          "reps": "10-15"
        }}
      ]
    }}
  ]
}}
"""

class FitnessCoachAssistant:
    """
    کلاس اصلی برای مدیریت گفتگوی هوشمند با کاربر (با استفاده از LCEL).
    """
    def __init__(self):
        self.llm = ChatCohere(model="command-r", temperature=0.7)
        self.memory = ConversationSummaryBufferMemory(
            llm=self.llm, 
            max_token_limit=1000, 
            return_messages=True, 
            memory_key="history"
        )
        self.prompt_template = ChatPromptTemplate.from_messages([
            ("system", "{system_prompt}"), # اینجا یک متغیر جدید اضافه کردیم
            MessagesPlaceholder(variable_name="history"),
            ("human", "{input}"),
        ])
        
        self.chain = (
            RunnablePassthrough.assign(
                history=lambda x: self.memory.chat_memory.messages,
            )
            | self.prompt_template
            | self.llm
            | StrOutputParser()
        )

    def get_response(self, user_input: str, formatted_prompt: str) -> str:
        """
        یک ورودی از کاربر و پرامپت کامل شده را می‌گیرد و پاسخ AI را برمی‌گرداند.
        """
        response = self.chain.invoke({
            "input": user_input,
            "system_prompt": formatted_prompt # پرامپت کامل شده را به زنجیره می‌دهیم
        })
        
        self.memory.save_context({"input": user_input}, {"output": response})
        return response

    @staticmethod
    def parse_final_response(ai_response: str):
        """
        تلاش می‌کند تا پاسخ نهایی AI را به فرمت JSON پارس کند.
        """
        try:
            if "```json" in ai_response:
                clean_response = ai_response.split("```json")[1].split("```")[0].strip()
            else:
                start_index = ai_response.find('{')
                end_index = ai_response.rfind('}')
                if start_index != -1 and end_index != -1:
                    clean_response = ai_response[start_index : end_index + 1]
                else:
                    return None
            return json.loads(clean_response)
        except (json.JSONDecodeError, IndexError):
            return None

# --- بخش تست (برای اجرای مستقیم این فایل) ---
if __name__ == "__main__":
    print("--- Fitness Coach Assistant Local Test ---")
    
    if not os.getenv("COHERE_API_KEY"):
        print("\n!!! هشدار: لطفاً کلید COHERE_API_KEY خود را در کد قرار دهید.")
    else:
        # ۱. شبیه‌سازی داده‌هایی که از فرم و دیتابیس می‌آیند
        mock_user_data = (
            "- نام: ایمان\n"
            "- جنسیت: مرد\n"
            "- قد: 180 سانتی‌متر\n"
            "- وزن فعلی: 85 کیلوگرم\n"
            "- وزن هدف: 80 کیلوگرم"
        )
        mock_exercises = (
            "- پرس سینه هالتر (برای گروه عضلانی: سینه)\n"
            "- اسکات با هالتر (برای گروه عضلانی: پا)\n"
            "- جلو بازو دمبل (برای گروه عضلانی: جلو بازو)"
        )

        # ۲. فرمت کردن پرامپت اصلی با داده‌های شبیه‌سازی شده
        formatted_system_prompt = SYSTEM_PROMPT.format(
            user_data=mock_user_data,
            available_exercises=mock_exercises
        )

        assistant = FitnessCoachAssistant()
        
        print("✅ دستیار هوشمند آماده است. گفتگو را شروع کنید (برای خروج 'exit' را تایپ کنید).")
        print("------------------------------------------------------------------")

        # ۳. شروع گفتگو با ارسال اولین پیام ("start")
        first_ai_message = assistant.get_response("start", formatted_system_prompt)
        print(f"AI: {first_ai_message}")

        # ۴. ادامه گفتگو در یک حلقه
        while True:
            user_message = input("You: ")
            if user_message.lower() == 'exit':
                break
            
            # برای پیام‌های بعدی، دیگر نیازی به ارسال پرامپت فرمت‌شده نیست
            ai_message = assistant.get_response(user_message, formatted_system_prompt)
            
            plan_data = assistant.parse_final_response(ai_message)
            
            if plan_data:
                print("\n--- مکالمه تمام شد ---")
                print("AI: برنامه تمرینی زیر بر اساس گفتگوی ما تولید شد:")
                print(json.dumps(plan_data, indent=2, ensure_ascii=False))
                print("----------------------\n")
                break
            else:
                print(f"AI: {ai_message}")