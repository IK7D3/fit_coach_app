# app/chatbot.py
import os
import json
from langchain_cohere import ChatCohere
# پرامپت تخصصی برای تولید بازخورد آنی
FEEDBACK_PROMPT = """
تو یک مربی بدنسازی هوش مصنوعی به نام «مربی‌همراه» هستی. کاربر در حال پر کردن فرم اطلاعاتش است.
او به سوال '{question}' پاسخ '{answer}' را داده است.
وظیفه تو: یک پیام کوتاه، مثبت و حمایت‌گر (حداکثر یک جمله) در واکنش به پاسخ او بنویس.
مثال: اگر به سوال 'چند روز در هفته تمرین می‌کنی؟' پاسخ داد '۳ روز'، تو بگو: 'عالیه! ۳ روز در هفته یک تعهد فوق‌العاده است.'
"""

# پرامپت تخصصی برای تولید برنامه نهایی
PLAN_GENERATION_PROMPT = """
تو یک مربی بدنسازی هوش مصنوعی متخصص به نام «مربی‌همراه» هستی.
وظیفه تو: بر اساس اطلاعات کامل کاربر، یک برنامه تمرینی هفتگی دقیق و شخصی‌سازی شده برای او در قالب یک ساختار JSON تولید کن.
برنامه باید کاملاً با اهداف، محدودیت‌ها و شرایط کاربر هماهنگ باشد.

---
<EXAMPLE>
این یک مثال کامل از ورودی و خروجی صحیح است. از این مثال یاد بگیر تا خروجی بی‌نقصی تولید کنی.

<EXAMPLE_USER_DATA>
- نام: سارا
- جنسیت: زن
- سن: 29
- قد: 165 سانتی‌متر
- وزن فعلی: 68 کیلوگرم
- وزن هدف: 60 کیلوگرم
- محل تمرین: باشگاه
- توصیف بدن: عضلانی با کمی چربی
- مشکلات فیزیکی: زانو درد خفیف در هنگام دویدن
- حس در آینه: می‌خواهم شکمم صاف‌تر و پاهام خوش‌فرم‌تر بشه
- انگیزه اصلی: افزایش اعتماد به نفس در محیط کار
- روزهای تمرین در هفته: 3
- حرکات نگران‌کننده: حرکت لانگز (Limges) به زانوم فشار میاره
</EXAMPLE_USER_DATA>

<EXAMPLE_JSON_OUTPUT>
{{
  "plan_summary": "این برنامه ۳ روزه با تمرکز بر تمرینات قدرتی برای کل بدن طراحی شده. با توجه به زانو درد، تمرینات هوازی کم‌فشار مانند الپتیکال جایگزین دویدن شده و از حرکت لانگز پرهیز شده است.",
  "weekly_plan": [
    {{
      "day": 1,
      "day_title": "تمرین کل بدن (A) - تمرکز بر پایین‌تنه",
      "exercises": [
        {{"name": "اسکات با وزن بدن", "sets": 3, "reps": "15-20"}},
        {{"name": "پرس پا دستگاه", "sets": 3, "reps": "10-12"}},
        {{"name": "پشت پا دستگاه", "sets": 3, "reps": "12-15"}},
        {{"name": "پرس سینه دمبل", "sets": 3, "reps": "10-12"}},
        {{"name": "پلانک", "sets": 3, "reps": "45 ثانیه"}}
      ]
    }},
    {{
      "day": 2,
      "day_title": "تمرین کل بدن (B) - تمرکز بر بالاتنه",
      "exercises": [
        {{"name": "زیر بغل سیم‌کش از جلو", "sets": 3, "reps": "10-12"}},
        {{"name": "پرس سرشانه دمبل", "sets": 3, "reps": "10-12"}},
        {{"name": "جلو بازو دمبل", "sets": 3, "reps": "12-15"}},
        {{"name": "پشت بازو سیم‌کش", "sets": 3, "reps": "12-15"}},
        {{"name": "الپتیکال", "sets": 0, "reps": "20 دقیقه"}}
      ]
    }},
    {{
      "day": 3,
      "day_title": "تمرین کل بدن (C) - ترکیبی",
      "exercises": [
        {{"name": "ددلیفت رومانیایی با دمبل", "sets": 3, "reps": "12-15"}},
        {{"name": "قفسه سینه دستگاه", "sets": 3, "reps": "12-15"}},
        {{"name": "نشر جانب دمبل", "sets": 3, "reps": "15-20"}},
        {{"name": "کرانچ شکم", "sets": 3, "reps": "تا حد توان"}},
        {{"name": "دوچرخه ثابت", "sets": 0, "reps": "15 دقیقه"}}
      ]
    }}
  ]
}}
</EXAMPLE_JSON_OUTPUT>
</EXAMPLE>
---

حالا بر اساس اطلاعات کاربر واقعی زیر، خروجی JSON را تولید کن.

<اطلاعات_کامل_کاربر>
{user_data}
</اطلاعات_کامل_کاربر>

**قوانین بسیار مهم برای فیلدهای JSON:**
-   فیلد `"sets"`: این فیلد **همیشه و تحت هیچ شرایطی** باید یک **عدد صحیح (integer)** باشد. برای تمرینات هوازی یا مداوم، عدد **`0`** را قرار بده.
-   فیلد `"reps"`: این فیلد همیشه باید یک **رشته متنی (string)** باشد.
-   خروجی تو باید فقط و فقط شامل ساختار JSON معتبر باشد و هیچ متن اضافه‌ای قبل یا بعد از آن نباشد.
"""

class FitnessCoachAssistant:
    def __init__(self):
        self.llm = ChatCohere(model="command-r", temperature=0.7)

    def get_feedback(self, question: str, answer: str) -> str:
        """ متخصص شماره ۱: تولید بازخورد آنی و کوتاه """
        try:
            prompt = FEEDBACK_PROMPT.format(question=question, answer=answer)
            response = self.llm.invoke(prompt)
            return response.content
        except Exception as e:
            print(f"Error in feedback generation: {e}")
            return "" # در صورت خطا، پیام خالی برمی‌گردانیم

    def generate_plan(self, user_data: str) -> str:
        """ متخصص شماره ۲: تولید برنامه تمرینی نهایی در قالب JSON """
        try:
            prompt = PLAN_GENERATION_PROMPT.format(user_data=user_data)
            response = self.llm.invoke(prompt)
            return response.content
        except Exception as e:
            print(f"Error in plan generation: {e}")
            return '{"error": "متاسفانه در تولید برنامه خطایی رخ داد."}'